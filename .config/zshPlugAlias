#==============
# SETUP DOTREPO
#==============
#git clone --bare https://github.com/akuseru1/dotfiles
# or
#git init --bare $HOME/Documents/DotFilesRepository
#dotrepo config --local status.showUntrackedFiles no
#==============
# MIGRATING
#==============
# do backups
#mkdir -p .backups/bare ;dotrepo checkout 2>&1 | egrep "\s+\." | awk {'print $1'} | xargs -I{} mv {} .backups/bare/{}
# then do (when everything backed up)
#dotrepo checkout
#force it if you have to
#
#
# Aliases
alias pkg='sudo eopkg'\
    pkgsi="sudo eopkg li -l | awk '/Name:/ {sub(/,$/,\"\",\$2); name= \$2} /Installed Size:/{print \$5\$6, name}' | sort -h "\
    pkgl="sudo eopkg li"\
    pkgs="sudo eopkg sr"\
    pkgi="sudo eopkg it"\
    pkgr="sudo eopkg rm"\
    pkgro="sudo eopkg rmo"\
    dockerclean="docker system prune --volumes -all"\
    station="~/.local/bin/Station-1.65.0-x86_64.AppImage"\
    xc="xclip -selection clipboard"\
    j="joplin"\
    v="nvim"\
    xmonad="$HOME/.cabal/bin/xmonad"\
    rz="mpv 'http://www.youtube.com/watch?v=w-RUTZBbGwM'"\
    rick="curl -s -L http://bit.ly/10hA8iC | bash"\
    bt="curl rate.sx"\
    cheat="$UTILITIES/sheetmaker.sh"\
    ytu="$UTILITIES/youtube/YT.tcl"\
    yta="$UTILITIES/youtube/downloadAudio.sh"\
    ytv="$UTILITIES/youtube/downloadVideo.sh"\
    dic="$UTILITIES/dictionary.sh"\
    conv="$UTILITIES/MkvToMp4.sh"\
    par="curl parrot.live"\
    wtr="$UTILITIES/weather.sh"\
    ssr="simplescreenrecorder"\
    yt="youtube-viewer"\
    r="ranger"\
    todoist="cd $PROGRAMS/todoist-linux && make up"\
    ma="make && sleep 0.5 ./a.out"\
    ta='tar xvzf'\
    code='code-oss'\
    pydocs='~/Documents/myScripts/python_documentation.sh'\
    xi='sudo vim /etc/X11/xinit/xinitrc'\
    xa='sudo /opt/lampp/manager-linux-x64.run'\
    djan='cd /home/solus/dev/trydjango/src'\
    corona='/home/solus/dev/corona/get_info'\
    tord='/home/solus/.local/share/torbrowser/tbb/x86_64/tor-browser_en-US/Browser/Downloads'\
    saco='source env/bin/activate'\
    sac='source .env/bin/activate'\
    sacr='source env/bin/activate && pip install -r requirements.txt'\
    ven='wine .wine/drive_c/Program\ Files/Vensim/venPLE32.exe'\
    dotrepo="git --git-dir=$HOME/.local/share/dotfiles --work-tree=$HOME"\
    dst='dotrepo status'\
    daa='dotrepo add'\
    dau='dotrepo add -u'\
    dgc='dotrepo commit'\
    dlg='dotrepo log --oneline --reverse'\
    dgpo='dotrepo push origin HEAD'\
    pgp='uploadProjects'\
    rtx='sudo systemctl restart display-manager'\
    wclass='xprop WM_CLASS'\
    wname='xprop WM_NAME'\
    wrole='xprop WM_ROLE'\
    flat='flatpak --installation=extra'\
    spot='flatpak --installation=extra run com.spotify.Client'\
    glv='git log --oneline --decorate --all --graph'\
    zealu='zeal-user-contrib'\
    ph='python_help'\
    trc='transmission-remote-cli'\
    py='python3'\
    audio="pavucontrol"\
    plz="sudo"\
    jp="tagainijisho"\
    ls='exa -a --color=automatic --group-directories-first'\
    l='exa -al --color=automatic --group-directories-first'\
    la='exa -a --color=automatic --group-directories-first'\
    ll='exa -l --color=automatic --group-directories-first'\
    lt='exa -aT --color=automatic --group-directories-first'\
    l.='exa -a | egrep "^\."'\
    lg='exa -a | grep '\
    df='df -h'\
    free='free -m'\
    ..='cd ..'\
    ...='cd ../..'\
    .3='cd ../../..'\
    .4='cd ../../..'\
    .5='cd ../../../..'\
    .6='cd ../../../../..'\
    yta-aac="youtube-dl --extract-audio --audio-format aac "\
    yta-best="youtube-dl --extract-audio --audio-format best "\
    yta-flac="youtube-dl --extract-audio --audio-format flac "\
    yta-m4a="youtube-dl --extract-audio --audio-format m4a "\
    yta-mp3="youtube-dl --extract-audio --audio-format mp3 "\
    yta-opus="youtube-dl --extract-audio --audio-format opus "\
    yta-vorbis="youtube-dl --extract-audio --audio-format vorbis "\
    yta-wav="youtube-dl --extract-audio --audio-format wav "\
    ytv-best="youtube-dl -f bestvideo+bestaudio "\
    du="du -hd 1"\
    pk="$PROGRAMS/PacketTracer-AppImage/out/Cisco_Packet_Tracer-7.2.1.glibc2.15-x86_64.AppImage"\
    tv="$HOME/.local/Programs/teamviewer/teamviewer"\
    zm="$HOME/.local/Programs/zoom/ZoomLauncher"\
    nmone="nmcli d wifi connect HYPERION "\
    nmtwo="nmcli d wifi connect Hyperion_R "\
    nmmobile='nmcli d wifi connect "One plus" '\
    nmc="nmcli d wifi connect"\
    nvmls="nvm ls-remote"\
    nvmch=". $SCRIPTS/useful/node/nvmch"\
    mydot="git clone --depth=1 https://www.github.com/akuseru1/dotfiles"\
    flas="export FLASK_APP=app.py && flask run"\
    logset="sudo lightdm-settings"\
    fixpkg="sudo usysconf run -f ssl-certs"\

alias su="su -" # the - lets you have env variables in root
    # sudo="sudo -E"\

    # colab="echo \"!wget https://github.com/SpencerPark/IJava/releases/download/v1.3.0/ijava-1.3.0.zip
    # !unzip ijava-1.3.0.zip
    # !python install.py --sys-prefix\" | xclip -sel clipboard"\

# lol git systemd vscode npm
#
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1   ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *.deb)       ar x $1      ;;
      *.tar.xz)    tar xf $1    ;;
      *.tar.zst)   unzstd $1    ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}


alias hig="history | grep -i" hi="history"
# LOL!!1
# Source: https://aur.archlinux.org/packages/lolbash/lolbash/lolbash.sh

alias wtf='dmesg'
alias onoz='cat /var/log/errors.log'
alias rtfm='man'

alias :3='echo'
alias visible='echo'
alias invisible='cat'
alias moar='more'
alias tldr='less'
alias alwayz='tail -f'

alias icanhas='mkdir'
alias gimmeh='touch'
alias donotwant='rm'
alias dowant='cp'
alias gtfo='mv'
alias nowai='chmod'

alias hai='cd'
alias iz='ls'
alias ihasbucket='df -h'

alias inur='locate'
alias iminurbase='finger'

alias btw='nice'
alias obtw='nohup'

alias nomz='ps aux'
alias nomnom='killall'

alias byes='exit'
alias cya='reboot'
alias kthxbai='halt'

alias pwned='ssh'

alias hackzor='git init'
alias rulz='git push'
alias bringz='git pull'
alias chicken='git add'
alias oanward='git commit -m'
alias ooanward='git commit -am'
alias yolo='git commit -m "$(curl -s http://whatthecommit.com/index.txt)"'
alias letcat='git checkout'
alias violenz='git rebase'

#=====================================================
#           git
#=====================================================
#
# Functions
#

# The name of the current branch
# Back-compatibility wrapper for when this function was defined here in
# the plugin, before being pulled in to core lib/git.zsh as git_current_branch()
# to fix the core -> git plugin dependency.
function current_branch() {
  git_current_branch
}

# Pretty log messages
function _git_log_prettily(){
  if ! [ -z $1 ]; then
    git log --pretty=$1
  fi
}
compdef _git _git_log_prettily=git-log

# Warn if the current branch is a WIP
function work_in_progress() {
  if $(git log -n 1 2>/dev/null | grep -q -c "\-\-wip\-\-"); then
    echo "WIP!!"
  fi
}

# Check if main exists and use instead of master
function git_main_branch() {
  if [[ -n "$(git branch --list main)" ]]; then
    echo main
  else
    echo master
  fi
}

#
# Aliases
# (sorted alphabetically)
#

alias g='git'

alias gaa='git add'
alias ga='git add'
alias gA='git add --all'
alias gapa='git add --patch'
alias gau='git add --update'
alias gav='git add --verbose'
alias gap='git apply'
alias gapt='git apply --3way'

alias gb='git branch'
alias gba='git branch -a'
alias gbd='git branch -d'
alias gbda='git branch --no-color --merged | command grep -vE "^(\+|\*|\s*($(git_main_branch)|development|develop|devel|dev)\s*$)" | command xargs -n 1 git branch -d'
alias gbD='git branch -D'
alias gbl='git blame -b -w'
alias gbnm='git branch --no-merged'
alias gbr='git branch --remote'
alias gbs='git bisect'
alias gbsb='git bisect bad'
alias gbsg='git bisect good'
alias gbsr='git bisect reset'
alias gbss='git bisect start'

alias ggc='git commit -v'
alias ggca='git commit -v --amend'
# alias gcn='git commit -v --no-edit --amend'
alias ggcall='git commit -v -a'
# alias gca!='git commit -v -a --amend'
# alias gcan!='git commit -v -a --no-edit --amend'
# alias gcans!='git commit -v -a -s --no-edit --amend'
# alias gcam='git commit -a -m'
# alias gcsm='git commit -s -m'
alias gcb='git checkout -b'
alias gcfl='git config --list'
alias gcfi='git config --global user.name "Juan Alejandro"; git config --global user.email jbernal@unal.edu.co'
# alias gcl='git clone --recurse-submodules'
alias gcld='git clone --depth=1'
alias gcl='git clone'
alias gclean='git clean -id'
alias gpristine='git reset --hard && git clean -dffx'
alias gcm='git checkout $(git_main_branch)'
alias gcd='git checkout develop'
alias gcmsg='git commit -m'
alias gc='git checkout'
alias gcount='git shortlog -sn'
alias gcp='git cherry-pick'
alias gcpa='git cherry-pick --abort'
alias gcpc='git cherry-pick --continue'
alias ggcs='git commit -S'

alias gd='git diff'
alias gdca='git diff --cached'
alias gdcw='git diff --cached --word-diff'
alias gdct='git describe --tags $(git rev-list --tags --max-count=1)'
alias gds='git diff --staged'
alias gdt='git diff-tree --no-commit-id --name-only -r'
alias gdw='git diff --word-diff'

function gdnolock() {
  git diff "$@" ":(exclude)package-lock.json" ":(exclude)*.lock"
}
compdef _git gdnolock=git-diff

function gdv() { git diff -w "$@" | view - }
compdef _git gdv=git-diff

alias gf='git fetch'
alias gfa='git fetch --all --prune'
alias gfo='git fetch origin'

alias gfg='git ls-files | grep'

alias gg='git gui citool'
alias gga='git gui citool --amend'

function ggf() {
  [[ "$#" != 1 ]] && local b="$(git_current_branch)"
  git push --force origin "${b:=$1}"
}
compdef _git ggf=git-checkout
function ggfl() {
  [[ "$#" != 1 ]] && local b="$(git_current_branch)"
  git push --force-with-lease origin "${b:=$1}"
}
compdef _git ggfl=git-checkout

function ggP() {
  if [[ "$#" != 0 ]] && [[ "$#" != 1 ]]; then
    git pull origin "${*}"
  else
    [[ "$#" == 0 ]] && local b="$(git_current_branch)"
    git pull origin "${b:=$1}"
  fi
}
compdef _git ggP=git-checkout

function ggp() {
  if [[ "$#" != 0 ]] && [[ "$#" != 1 ]]; then
    git push origin "${*}"
  else
    [[ "$#" == 0 ]] && local b="$(git_current_branch)"
    git push origin "${b:=$1}"
  fi
}
compdef _git ggp=git-checkout

# pull and push
function ggpp() {
  if [[ "$#" == 0 ]]; then
    ggP && ggp
  else
    ggP "${*}" && ggp "${*}"
  fi
}
compdef _git ggpp=git-checkout

function ggPr() {
  [[ "$#" != 1 ]] && local b="$(git_current_branch)"
  git pull --rebase origin "${b:=$1}"
}
compdef _git ggPr=git-checkout

# alias ggpur='ggPr'
# alias ggPu='git pull origin "$(git_current_branch)"'
#
alias ggpush='git push origin "$(git_current_branch)"'

alias gbsup='git branch --set-upstream-to=origin/$(git_current_branch)'
alias gpsup='git push --set-upstream origin $(git_current_branch)'

alias ghh='git help'

alias gignore='git update-index --assume-unchanged'
alias gignored='git ls-files -v | grep "^[[:lower:]]"'
alias git-svn-dcommit-push='git svn dcommit && git push github $(git_main_branch):svntrunk'

alias gk='\gitk --all --branches'
alias gke='\gitk --all $(git log -g --pretty=%h)'

# alias gl='git pull'
alias glg="git log --reverse --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr)'"
alias glgs='git log --stat'
alias glgp='git log --stat -p'
alias glgg='git log --graph'
alias glgga='git log --graph --decorate --all'
alias glgm='git log --graph --max-count=10'
alias glo='git log --oneline --decorate'
alias glol="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'"
alias glols="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --stat"
alias glod="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'"
alias glods="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset' --date=short"
alias glola="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --all"
alias glog='git log --oneline --decorate --graph'
alias gloga='git log --oneline --decorate --graph --all'
alias glp="_git_log_prettily"

alias gm='git merge'
alias gmom='git merge origin/$(git_main_branch)'
alias gmt='git mergetool --no-prompt'
alias gmtvim='git mergetool --no-prompt --tool=vimdiff'
alias gmum='git merge upstream/$(git_main_branch)'
alias gma='git merge --abort'

alias gp='git push'
alias gpd='git push --dry-run'
alias gpf='git push --force-with-lease'
alias gpf='git push --force'
alias gpoat='git push origin --all && git push origin --tags'
# alias gpu='git push upstream'
alias gpv='git push -v'

alias gr='git remote'
alias gra='git remote add'
alias grb='git rebase'
alias grba='git rebase --abort'
alias grbc='git rebase --continue'
alias grbd='git rebase develop'
alias grbi='git rebase -i'
alias grbm='git rebase $(git_main_branch)'
alias grbs='git rebase --skip'
alias grev='git revert'
alias grh='git reset'
alias grhh='git reset --hard'
alias groh='git reset origin/$(git_current_branch) --hard'
alias grm='git rm'
alias grmc='git rm --cached'
alias grmv='git remote rename'
alias grrm='git remote remove'
alias grs='git restore'
alias grset='git remote set-url'
alias grss='git restore --source'
alias grt='cd "$(git rev-parse --show-toplevel || echo .)"'
alias gru='git reset --'
alias grup='git remote update'
alias grv='git remote -v'

alias gsb='git status -sb'
alias gsd='git svn dcommit'
alias gsh='git show'
alias gsi='git submodule init'
alias gsps='git show --pretty=short --show-signature'
alias gsr='git svn rebase'
alias gss='git status -s'
alias gst='git status'

# use the default stash push on git 2.13 and newer
autoload -Uz is-at-least
is-at-least 2.13 "$(git --version 2>/dev/null | awk '{print $3}')" \
  && alias gsta='git stash push' \
  || alias gsta='git stash save'

alias gstaa='git stash apply'
alias gstc='git stash clear'
alias gstd='git stash drop'
alias gstl='git stash list'
alias gstp='git stash pop'
alias gsts='git stash show --text'
alias gstu='git stash --include-untracked'
alias gstall='git stash --all'
alias gsu='git submodule update'
alias gsw='git switch'
alias gswc='git switch -c'

alias gts='git tag -s'
alias gtv='git tag | sort -V'
alias gtl='gtl(){ git tag --sort=-v:refname -n -l "${1}*" }; noglob gtl'

alias gunignore='git update-index --no-assume-unchanged'
alias gunwip='git log -n 1 | grep -q -c "\-\-wip\-\-" && git reset HEAD~1'
alias gP='git pull'
alias gPr='git pull --rebase'
alias gPrv='git pull --rebase -v'
alias gPra='git pull --rebase --autostash'
alias gPrav='git pull --rebase --autostash -v'
alias gPum='git pull upstream $(git_main_branch)'

alias gwch='git whatchanged -p --abbrev-commit --pretty=medium'
alias gwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign -m "--wip-- [skip ci]"'

alias gam='git am'
alias gamc='git am --continue'
alias gams='git am --skip'
alias gama='git am --abort'
alias gamscp='git am --show-current-patch'

function grename() {
  if [[ -z "$1" || -z "$2" ]]; then
    echo "Usage: $0 old_branch new_branch"
    return 1
  fi

  # Rename branch locally
  git branch -m "$1" "$2"
  # Rename branch in origin remote
  if git push origin :"$1"; then
    git push --set-upstream origin "$2"
  fi
}
#=====================================================
#           Systemd
#=====================================================
user_commands=(
  cat
  get-default
  help
  is-active
  is-enabled
  is-failed
  is-system-running
  list-dependencies
  list-jobs
  list-sockets
  list-timers
  list-unit-files
  list-units
  show
  show-environment
  status)

sudo_commands=(
  add-requires
  add-wants
  cancel
  daemon-reexec
  daemon-reload
  default
  disable
  edit
  emergency
  enable
  halt
  hibernate
  hybrid-sleep
  import-environment
  isolate
  kexec
  kill
  link
  list-machines
  load
  mask
  poweroff
  preset
  preset-all
  reboot
  reenable
  reload
  reload-or-restart
  reset-failed
  rescue
  restart
  revert
  set-default
  set-environment
  set-property
  start
  stop
  suspend
  switch-root
  try-reload-or-restart
  try-restart
  unmask
  unset-environment)

for c in $user_commands; do; alias sc-$c="systemctl $c"; done
for c in $sudo_commands; do; alias sc-$c="sudo systemctl $c"; done
for c in $user_commands; do; alias scu-$c="systemctl --user $c"; done
for c in $sudo_commands; do; alias scu-$c="systemctl --user $c"; done

alias sct="sc-status"
alias sca="sc-start"
alias sco="sc-stop"
alias sc-enable-now="sc-enable --now"
alias sc-disable-now="sc-disable --now"
alias sc-mask-now="sc-mask --now"

alias scu-enable-now="scu-enable --now"
alias scu-disable-now="scu-disable --now"
alias scu-mask-now="scu-mask --now"

function systemd_prompt_info {
  local unit
  for unit in $@; do
    echo -n "$ZSH_THEME_SYSTEMD_PROMPT_PREFIX"
    [[ -n "$ZSH_THEME_SYSTEMD_PROMPT_CAPS" ]] && echo -n "${(U)unit}:" || echo -n "$unit:"
    if systemctl is-active $unit &>/dev/null; then
        echo -n "$ZSH_THEME_SYSTEMD_PROMPT_ACTIVE"
    else
        echo -n "$ZSH_THEME_SYSTEMD_PROMPT_NOTACTIVE"
    fi
    echo -n "$ZSH_THEME_SYSTEMD_PROMPT_SUFFIX"
  done
}

#=====================================================
#           vscode
#=====================================================

# VS Code (stable / insiders) / VSCodium zsh plugin
# Authors:
#   https://github.com/MarsiBarsi (original author)
#   https://github.com/babakks
#   https://github.com/SteelShot

# Verify if any manual user choice of VS Code exists first.
# if [[ -n "$VSCODE" ]] && ! which $VSCODE &>/dev/null; then
#   echo "'$VSCODE' flavour of VS Code not detected."
#   unset VSCODE
# fi

# # Otherwise, try to detect a flavour of VS Code.
# if [[ -z "$VSCODE" ]]; then
#   if which code &>/dev/null; then
#     VSCODE=code
#   elif which code-insiders &>/dev/null; then
#     VSCODE=code-insiders
#   elif which codium &>/dev/null; then
#     VSCODE=codium
#   else
#     return
#   fi
# fi

# alias vsc="$VSCODE ."
# alias vsca="$VSCODE --add"
# alias vscd="$VSCODE --diff"
# alias vscg="$VSCODE --goto"
# alias vscn="$VSCODE --new-window"
# alias vscr="$VSCODE --reuse-window"
# alias vscw="$VSCODE --wait"
# alias vscu="$VSCODE --user-data-dir"

# alias vsced="$VSCODE --extensions-dir"
# alias vscie="$VSCODE --install-extension"
# alias vscue="$VSCODE --uninstall-extension"

# alias vscv="$VSCODE --verbose"
# alias vscl="$VSCODE --log"
# alias vscde="$VSCODE --disable-extensions"


#=====================================================
#           npm
#=====================================================



(( $+commands[npm] )) && {
  rm -f "${ZSH_CACHE_DIR:-$ZSH/cache}/npm_completion"

  _npm_completion() {
    local si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
}

# Install dependencies globally
alias npmg="npm i -g "

# npm package names are lowercase
# Thus, we've used camelCase for the following aliases:

# Install and save to dependencies in your package.json
# npms is used by https://www.npmjs.com/package/npms
alias npmS="npm i -S "

# Install and save to dev-dependencies in your package.json
# npmd is used by https://github.com/dominictarr/npmd
alias npmD="npm i -D "

# Execute command from node_modules folder based on current directory
# i.e npmE gulp
alias npmE='PATH="$(npm bin)":"$PATH"'

# Check which npm modules are outdated
alias npmO="npm outdated"

# Check package versions
alias npmV="npm -v"

# List packages
alias npmL="npm list"

# List top-level installed packages
alias npmL0="npm ls --depth=0"

# Run npm start
alias npmst="npm start"

# Run npm test
alias npmt="npm test"

# Run npm scripts
alias npmR="npm run"

# Run npm publish
alias npmP="npm publish"

# Run npm init
alias npmI="npm init"

#============
#DOCKER
#============
#https://github.com/akarzim/zsh-docker-aliases
#
# Defines Docker aliases.
#
# Author:
#   François Vantomme <akarzim@gmail.com>
#

# Return if requirements are not found.
if (( ! $+commands[docker] )); then
    return 1
fi

#
# Functions
#

# Set Docker Machine environment
function dkme {
    if (( ! $+commands[docker-machine] )); then
        return 1
    fi

    eval $(docker-machine env $1)
}

# Set Docker Machine default machine
function dkmd {
    if (( ! $+commands[docker-machine] )); then
        return 1
    fi

    pushd ~/.docker/machine/machines

    if [[ ! -d $1 ]]; then
        echo "Docker machine '$1' does not exists. Abort."
        popd
        return 1
    fi

    if [[ -L default ]]; then
        eval $(rm -f default)
    elif [[ -d default ]]; then
        echo "A default manchine already exists. Abort."
        popd
        return 1
    elif [[ -e default ]]; then
        echo "A file named 'default' already exists. Abort."
        popd
        return 1
    fi

    eval $(ln -s $1 default)
    popd
}


#
# Defines Docker aliases.
#
# Author:
#   François Vantomme <akarzim@gmail.com>
#

#
# Aliases
#

# Docker
alias dk='docker'
alias dka='docker attach'
alias dkb='docker build'
alias dkd='docker diff'
alias dkdf='docker system df'
alias dke='docker exec'
alias dkE='docker exec -e COLUMNS=`tput cols` -e LINES=`tput lines` -i -t'
alias dkh='docker history'
alias dki='docker images'
alias dkin='docker inspect'
alias dkinfo='docker info'
alias dkim='docker import'
alias dkk='docker kill'
alias dkkh='docker kill -s HUP'
alias dkl='docker logs'
alias dkL='docker logs -f'
alias dkli='docker login'
alias dklo='docker logout'
alias dkls='docker ps'
alias dkpa='docker pause'
alias dkpA='docker unpause'
alias dkP='docker pull'
alias dkp='docker push'
alias dkps='docker ps'
alias dkpsa='docker ps -a'
alias dkr='docker run'
alias dkri='docker run -i -t'
alias dkR='docker run -e COLUMNS=`tput cols` -e LINES=`tput lines` -i -t --rm'
alias dkRb='docker run -e COLUMNS=`tput cols` -e LINES=`tput lines` -i -t --rm --entrypoint /bin/bash'
alias dkRM='docker system prune'
alias dkrm='docker rm'
alias dkrmi='docker rmi'
alias dkrn='docker rename'
alias dks='docker start'
alias dkS='docker restart'
alias dkst='docker stats'
alias dksv='docker save'
alias dkt='docker tag'
alias dktop='docker top'
alias dkup='docker update'
alias dkV='docker volume'
alias dkv='docker version'
alias dkw='docker wait'
alias dkx='docker stop'

## Container (C)
alias dkC='docker container'
alias dkCa='docker container attach'
alias dkCcp='docker container cp'
alias dkCd='docker container diff'
alias dkCe='docker container exec'
alias dkCE='docker container exec -e COLUMNS=`tput cols` -e LINES=`tput lines` -i -t'
alias dkCin='docker container inspect'
alias dkCk='docker container kill'
alias dkCl='docker container logs'
alias dkCL='docker container logs -f'
alias dkCls='docker container ls'
alias dkCp='docker container pause'
alias dkCpr='docker container prune'
alias dkCrn='docker container rename'
alias dkCS='docker container restart'
alias dkCrm='docker container rm'
alias dkCr='docker container run'
alias dkCR='docker container run -e COLUMNS=`tput cols` -e LINES=`tput lines` -i -t --rm'
alias dkCRb='docker container run -e COLUMNS=`tput cols` -e LINES=`tput lines` -i -t --rm --entrypoint /bin/bash'
alias dkCs='docker container start'
alias dkCst='docker container stats'
alias dkCx='docker container stop'
alias dkCtop='docker container top'
alias dkCP='docker container unpause'
alias dkCup='docker container update'
alias dkCw='docker container wait'

## Image (I)
alias dkI='docker image'
alias dkIb='docker image build'
alias dkIh='docker image history'
alias dkIim='docker image import'
alias dkIin='docker image inspect'
alias dkIls='docker image ls'
alias dkIpr='docker image prune'
alias dkIpl='docker image pull'
alias dkIph='docker image push'
alias dkIrm='docker image rm'
alias dkIsv='docker image save'
alias dkIt='docker image tag'

## Volume (V)
alias dkV='docker volume'
alias dkVin='docker volume inspect'
alias dkVls='docker volume ls'
alias dkVpr='docker volume prune'
alias dkVrm='docker volume rm'

## Network (N)
alias dkN='docker network'
alias dkNc='docker network create'
alias dkNco='docker network connect'
alias dkNx='docker network disconnect'
alias dkNin='docker network inspect'
alias dkNls='docker network ls'
alias dkNpr='docker network prune'
alias dkNrm='docker network rm'

## System (Y)
alias dkY='docker system'
alias dkYdf='docker system df'
alias dkYpr='docker system prune'

## Stack (K)
alias dkK='docker stack'
alias dkKls='docker stack ls'
alias dkKps='docker stack ps'
alias dkKrm='docker stack rm'

## Swarm (W)
alias dkW='docker swarm'

## CleanUp (rm)
# Clean up exited containers (docker < 1.13)
alias dkrmC='docker rm $(docker ps -qaf status=exited)'

# Clean up dangling images (docker < 1.13)
alias dkrmI='docker rmi $(docker images -qf dangling=true)'

# Pull all tagged images
alias dkplI='docker images --format "{{ .Repository }}" | grep -v "^<none>$" | xargs -L1 docker pull'

# Clean up dangling volumes (docker < 1.13)
alias dkrmV='docker volume rm $(docker volume ls -qf dangling=true)'

# Docker Machine (m)
alias dkm='docker-machine'
alias dkma='docker-machine active'
alias dkmcp='docker-machine scp'
alias dkmin='docker-machine inspect'
alias dkmip='docker-machine ip'
alias dkmk='docker-machine kill'
alias dkmls='docker-machine ls'
alias dkmpr='docker-machine provision'
alias dkmps='docker-machine ps'
alias dkmrg='docker-machine regenerate-certs'
alias dkmrm='docker-machine rm'
alias dkms='docker-machine start'
alias dkmsh='docker-machine ssh'
alias dkmst='docker-machine status'
alias dkmS='docker-machine restart'
alias dkmu='docker-machine url'
alias dkmup='docker-machine upgrade'
alias dkmv='docker-machine version'
alias dkmx='docker-machine stop'

# Docker Compose (c)
alias dkc='docker-compose'
alias dkcb='docker-compose build'
alias dkcB='docker-compose build --no-cache'
alias dkcd='docker-compose down'
alias dkce='docker-compose exec -e COLUMNS=`tput cols` -e LINES=`tput lines`'
alias dkck='docker-compose kill'
alias dkcl='docker-compose logs'
alias dkcL='docker-compose logs -f'
alias dkcls='docker-compose ps'
alias dkcp='docker-compose pause'
alias dkcP='docker-compose unpause'
alias dkcpl='docker-compose pull'
alias dkcph='docker-compose push'
alias dkcps='docker-compose ps'
alias dkcr='docker-compose run -e COLUMNS=`tput cols` -e LINES=`tput lines`'
alias dkcR='docker-compose run -e COLUMNS=`tput cols` -e LINES=`tput lines` --rm'
alias dkcrm='docker-compose rm'
alias dkcs='docker-compose start'
alias dkcsc='docker-compose scale'
alias dkcS='docker-compose restart'
alias dkcu='docker-compose up'
alias dkcU='docker-compose up -d'
alias dkcv='docker-compose version'
alias dkcx='docker-compose stop'
