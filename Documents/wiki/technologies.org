
* Angular
start here: https://angular.io/tutorial
curso vence sep 30!!: https://courses.edx.org/courses/course-v1:Microsoft+DEV314x+1T2019a/course/
ecommerce fast: https://www.youtube.com/watch?v=gLa2LxMdAPs
ecommerce: https://www.youtube.com/watch?v=9K15zC0gN2I
best ecommerce: https://medium.com/javascript-in-plain-english/how-to-create-an-app-using-angular-and-firebase-part-1-debb80f928ad
* CSS
curso: https://courses.edx.org/courses/course-v1:W3Cx+CSS.0x+3T2018/course/
* React 
ecommerce: https://www.youtube.com/watch?v=wPQ1-33teR4
npx create-react-app
** react elements
+ theres html  like syntax (jsx)
const element = (
   <h1 className="greetings">
      hello, world!
   </h1>
);
gets mapped to 
const element = React.createElement(
    'h1',
    {className: 'greeting'},
    'Hello, World'

** react Components

you always extend the component, always create a constructor and a render, and always export it,

class Menu extends Component {
  constructor(props) {
    super(props);

  }
  
  render() {
    return (
        //jsx
    );

  }
  export default Menu
** react router
yarn add react-router-dom

-- in app.js
import { BrowserRouter } from 'react-router-dom';
<BrowserRouter>
      <div className="App">
        <Main />
      </div>
    </BrowserRouter>
    
-- in mainComponent


    render() {
    const HomePage = () => {
      return (
        <Home
          dish={this.state.dishes.filter(dish => dish.featured)[0]}
          promotion={this.state.promotions.filter(promo => promo.featured)[0]}
          leader={this.state.leaders.filter(leader => leader.featured)[0]}
        />
      );
    };
    // can be { match , location , history }

    const DishWithId = ({ match }) => {
      return (
        <DishDetail
          dish={
            this.state.dishes.filter(dish => dish.id === parseInt(match.params.dishId, 10))[0]
          }
          comments={this.state.comments.filter(
            comment => comment.dishId === parseInt(match.params.dishId, 10)
          )}
        />
      );
    };

    return (
      <div>
        <Header />
        <Switch>
          <Route path="/home" component={HomePage} />
          <Route exact path="/menu" component={() => <Menu dishes={this.state.dishes}/>}/>
          <Route path="/menu/:dishId" component={DishWithId} />
          <Route exact path="/contactus" component={Contact} />
          <Redirect to="/home" />
        </Switch>
        <Footer />
      </div>
    );
  }

*** links
the link is in backticks, and it sends the parameter dish.id as a prop, and is recieved in mainComponent in <Route path="/menu/:dishId">


    <Card>
      <Link to={`/menu/${dish.id}`}>
        <CardImg width="100%" src={dish.image} alt={dish.name} />
        <CardImgOverlay>
          <CardTitle>{dish.name}</CardTitle>
        </CardImgOverlay>
      </Link>
    </Card>


* Javascript
* PHP
* Nodejs
** --dev-save
it creates/appends the package to devdependencies in package.json
* Rust
** docs
rustup doc
** compile
rustc filename
** create project
cargo new name_app --bin
** unit tests
cargo test

to create a test:

#[test]
fn add() {

    assert_eq!(2+2, 4);
}

** project docs
cargo doc --open

** iterators
have defined functions and work like this
(0..10).sum

** match (same as case)

the underscore _ means anything else

match variable {

    0=>0,
    1=>1,
    _=> final,

}
** loops
there are for and while,

there are also loop, which can be used in expressions like this:

    let mut result = 1;
    result = loop {
        result += 1;
        if result == 10 {
            break result * 2
        }
    };
    /// result = 20

* awk
make colon be treated as a space

    awk -F: '{print $1}' /etc/group | head -4

* pdfgrep
it has most of the same settings as grep, it uses regex
-- means end of options similar to grep -e
so pdfgrep -- -v
insensitive
pdfgrep -i
* sed
is better to use sed -r because it groups with () instead of \( \) 
which means you can use normal parenthesis like \( \) 

capture the entire line with &

    seq 15 | sed 's/.*/& sucks/'


